1. What is Spring boot?
A Java-based spring framework used for Rapid Application Development (to build stand-alone microservices). 
It has extra support of auto-configuration and embedded application servers like tomcat, jetty, etc.
Provide production-ready features such as metrics, health checks, and externalized configuration.
Absolutely no requirement for XML configuration.

2. Why Spring Boot over Spring?
Below are some key points which spring boot offers but spring doesn’t:

Starter POMs: Spring Boot provides pre-configured dependencies (spring-boot-starter-*), reducing manual dependency management.
Version Management: Automatically manages dependency versions, preventing conflicts.
Auto Configuration: Automatically configures beans based on dependencies, eliminating manual setup.
Component Scanning: Scans and registers beans automatically without requiring explicit configuration.
Embedded Server: Comes with an embedded Tomcat/Jetty server, removing the need for external server setup.
In-Memory Database: Supports H2, HSQL, and Derby databases for quick prototyping and testing.
Actuators: Provides production-ready monitoring and health-check APIs (/actuator/health, /actuator/metrics).

3. What is the starter dependency of the Spring boot module?
Data JPA Starter (spring-boot-starter-data-jpa) – Provides integration with JPA and Hibernate for database operations.
Test Starter (spring-boot-starter-test) – Includes testing libraries like JUnit, Mockito, and Spring Test.
Security Starter (spring-boot-starter-security) – Adds Spring Security for authentication and authorization.
Web Starter (spring-boot-starter-web) – Enables RESTful web applications with Spring MVC and an embedded Tomcat server.
Mail Starter (spring-boot-starter-mail) – Provides JavaMail support for sending emails.
Thymeleaf Starter (spring-boot-starter-thymeleaf) – Supports Thymeleaf templating for web applications.

4. How Does Spring Boot Work?
Spring Boot automatically configures your application based on the dependencies in the project using annotations.

- The entry point is the class with the @SpringBootApplication annotation, which combines @Configuration, @EnableAutoConfiguration, and @ComponentScan.
- @EnableAutoConfiguration detects dependencies and configures beans automatically.
- @ComponentScan scans and registers components (@Component, @Service, @Repository, etc.) in the package and sub-packages.
- The application starts with an embedded server (Tomcat, Jetty, or Undertow) when running a web application.

5. What does the @SpringBootApplication annotation do internally?
The @SpringBootApplication annotation is equivalent to using @Configuration, @EnableAutoConfiguration, and @ComponentScan with their default attributes. 
Spring Boot enables the developer to use a single annotation instead of using multiple. 
But, as we know, Spring provided loosely coupled features that we can use for each annotation as per our project needs.

6. How does a spring boot application get started?
A Spring Boot application must have a main method. This method serves as an entry point, which invokes the SpringApplication.run method to bootstrap the application.
@SpringBootApplication 
public class MyApplication {  
       public static void main(String[] args) {
             SpringApplication.run(MyApplication.class);        
               // other statements     
       } 
}

7. What is Spring Boot CLI and what are its benefits?
Spring Boot CLI is a command-line tool that allows developers to create and run Spring Boot applications using Groovy scripts instead of traditional Java code. 
It reduces boilerplate code and simplifies the development process by handling configurations automatically.

8. What is Spring Initializer?
A web application that helps you to create an initial spring boot project structure and provides a maven or gradle file to build your code. 
Solves the problem of setting up a framework when you are starting a project from scratch.

9. What are starter dependencies?
Spring boot starter is a maven template that contains a collection of all the relevant transitive dependencies that are needed to start a particular functionality.
Like we need to import spring-boot-starter-web dependency for creating a web application.
<dependency>
<groupId> org.springframework.boot</groupId>
<artifactId> spring-boot-starter-web </artifactId>
</dependency>

10. What is the difference between @RestController and @Controller in Spring Boot?
@Controller – Used for traditional MVC applications. It returns a view (HTML/JSP) and maps data to the UI.
@RestController – A specialized version of @Controller that returns JSON/XML responses instead of views. It is used for REST APIs.
==> @RestController = @Controller + @ResponseBody (automatically serializes objects to JSON/XML).

11. What is an IoC Container in Spring?
An IoC (Inversion of Control) Container is the core of the Spring framework that manages dependency injection (DI) automatically. It is responsible for:
✔ Creating objects (Beans)
✔ Managing their lifecycle (instantiation, configuration, destruction)
✔ Injecting dependencies where required

How Does the IoC Container Work?
Scans and loads bean definitions from configuration files or annotations (@Component, @Service, etc.).
Creates and manages beans inside the container.
Injects dependencies based on @Autowired, constructor injection, or setter injection.

Types of IoC Containers in Spring
BeanFactory – Lightweight, basic IoC container for managing simple dependencies.
ApplicationContext – Advanced IoC container with extra features like event handling, internationalization, and AOP support.

12. Describe the flow of HTTPS requests through the Spring Boot application?
Spring Boot applications follow the MVC (Model-View-Controller) architecture, and the request flow works as follows:

Client (Frontend/User Request): A client (browser, mobile app, or API consumer) sends an HTTPS request to the server.
Controller (Request Handling Layer): The request is received by a Spring Boot Controller (@RestController or @Controller). The controller processes the request, calls the appropriate service, and returns a response.
Service Layer (Business Logic): The service layer contains business logic and interacts with the repository layer. It fetches or modifies data as needed.
Repository Layer (Data Access Layer): The repository layer interacts with the database using Spring Data JPA. It performs CRUD (Create, Read, Update, Delete) operations on the database.
Model (Data Representation): The model layer represents the data structure (usually mapped to database tables). Entities in this layer are managed using JPA annotations.
Database: The database stores and retrieves information. The repository layer interacts with the database using Spring Data JPA.
Response Back to Client: The processed response is sent back from the service → controller → client. If using a REST API, the response is usually in JSON or XML format.

13. What is the difference between RequestMapping and GetMapping?
RequestMapping can be used with GET, POST, PUT, and many other request methods using the method attribute on the annotation. 
Whereas getMapping is only an extension of RequestMapping which helps you to improve on clarity on request.

14. What is Spring Actuator? What are its advantages?
An actuator is an additional feature of Spring that helps you to monitor and manage your application when you push it to production. 
These actuators include auditing, health, CPU usage, HTTP hits, and metric gathering, and many more that are automatically applied to your application.

To enable the spring actuator feature, we need to add the dependency of “spring-boot-starter-actuator” in pom.xml.
<dependency>
<groupId> org.springframework.boot</groupId>
<artifactId> spring-boot-starter-actuator </artifactId>
</dependency>

15. How to get the list of all the beans in your Spring boot application?
Spring Boot actuator “/Beans” is used to get the list of all the spring beans in your application.

16. How to check the environment properties in your Spring boot application?
Spring Boot actuator “/env” returns the list of all the environment properties of running the spring boot application.

17. How to enable debugging log in the spring boot application?
Debugging logs can be enabled in three ways -
- Start the application with --debug switch.
- Set the logging.level.root=debug property in application.property file.
- Set the logging level of the root logger to debug in the supplied logging configuration file.

18. How to disable a specific auto-configuration class?
You can use exclude attribute of @EnableAutoConfiguration if you want auto-configuration not to apply to any specific class.
@EnableAutoConfiguration(exclude={className}) //use of exclude

19. Can we disable the default web server in the Spring boot application?
Yes, we can use application.properties to configure the web application type i.e spring.main.web-application-type=none.

20. Can we override or replace the Embedded tomcat server in Spring Boot?
Yes, we can replace the Embedded Tomcat server with any server by using the Starter dependency in the pom.xml file. 
Like you can use spring-boot-starter-jetty as a dependency for using a jetty server in your project.

21. What is Spring Boot dependency management?
Spring Boot dependency management is used to manage dependencies and configuration automatically without you specifying the version for any of that dependencies.

22. What Are the Basic Annotations that Spring Boot Offers?
The primary annotations that Spring Boot offers reside in its org.springframework.boot.autoconfigure and its sub-packages. Here are a couple of basic ones:
@EnableAutoConfiguration – to make Spring Boot look for auto-configuration beans on its classpath and automatically apply them.
@SpringBootApplication – used to denote the main class of a Boot Application. This annotation combines @Configuration, @EnableAutoConfiguration, and @ComponentScan annotations with their default attributes.






