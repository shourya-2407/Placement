1. Computing Systems : Servers, Database, Cache, Applications, Message queue

* Components of system Design
2. Logical Entities: Data, Database, Applications, Cache, Message Queue, Infra, Communication
3. Tangible Entities: Text/Image, MongoDB/MySQL, Java/Python, Redis, Kafka/RabbitMQ, AWS/Google cloud platform, APIs/RPCs/Messages
   (Technologies used by Logical entities)

4. Client-Server Architecture: 
a. 2 tier architecture
Client         ==>  Server  
(presentation)     (Logic and database)
Eg: light weight website for small business

b. 3 tier architecture
Client --> Logic --> Database
Eg: Basic library management for school (lots of data and logic processing required)

c. n tier architecture
Client --> Load balancer --> Logic --> Cache --> Database
Eg: Large scale systems (gmail, facebook)

Thin client: Logic on server side. Eg: E-commerce sites, Netflix and other streaming platforms.
Thick client: Logic on client side. Eg: Gaming apps, Video editing softwares.

5. Proxies
Forward proxy => 
- proxy is on behalf of client.
- disguises client's IP address.
- blocks malicious traffic from reaching original web server.
- improves user experience by caching external site content.

Reverse proxy =>
- proxy is on behalf of server.
- anonimity of server.
- scrubs all incoming traffic before sending it to backend servers.
- can efficiently distribute load for application using multiple servers.
- deflates overall impact of Distributed Denial of Service attacks (attackers flood a server with internet traffic).
- provides a single configuration point to manage SSL/TSL.

If an organisation blocks access to some sites, proxies can be used to bypass them.

6. Data and Data flow
    Business layer(user level) => text/vidoes/images
    Application layer => JSON/XML
    DB => tables/indexes/lists/trees
    Network layer => packets
    Hardware => 0s & 1s
Data stores => Databases, Queues, Caches, Indexes
Data flows => APIs, Events, Messages
Factors for System Design => Type of data, volume of data, consumption/retrieval speed, security.

7. Types of Systems => Authorization(low volume & high security), Streaming(high volume & high retrieval speed), Transactional(security), Heavy compute system.

8. Databases:
    Relational => has a fixed schema and ACID properties. (Atomicity, Consistency, Isolation, Duarability)
    Non Relational => 
    a. key-value stores -> eg-cache
    b. document based -> eg-mogodb; can support heavy read and write, collections(table) and documents(row), dynamic data flexibility, highly scalable, sharding.
    c. column based -> eg-cassandra, hbase, scylla; only cols are required, 
                       realtime use case music app, columns can be -> users, songs, user_by_liked_song, song_by_user
    d. Index based(Search DBs) => eg-elastic, solar

9. Applications
    Frontend Applications -> render UI elements, handle interactions, collect data, communicate with BE(APIs), render static data 
    Backend Applications -> expose APIs, house business logic, handle data modeling, interact with data stores, interact with other services

10. Cache:
      Cache invalidation -> using ttl
      Cache eviction -> using algorithms like FIFO(first in first out), LFU(least frequently used), LRU(least recently used).
      Cache Strategy -> 
      a. Cache aside strategy -> server/application communicates with DB and cache. Cache has no direct access to DB.
      b. Read through strategy -> cache sits in between server and DB. Data modeling of cache and DB should be similar.
      c. Write through strategy -> cache sits in between server and DB. When the application updates data in cache, it has to update data in DB
      d. Write around strategy -> Application talks to Db for write operations and reads data from cache.
      e. Write back strategy -> cache is between application and DB. And all the writes are processed in bulk. It also handles DB downtime.
12. REST APIs: Representational State transfer.
    Client server architecture, cacheable, supports layered architecture(i.e each node knows about only the immediate node), 
    stateless(server/client doesn't save the state of the object, an uniform object is shared), uniform interface(all the apis should be built on same protocol).
13. State transfer => state of data should be same. 
    Stateless => server should not store the state of client request.
14. Http status codes:
    1xx -> informational      2xx -> success      3xx -> redirected
    4xx -> client error       5xx -> server error
15. Message queues:
    SQS, Kafka, Rabbit MQ.
    ordered queues -> blocks the further processing of messages, if 1 message fails.
    unordered queues -> failed messages go into DLQ and other messages get processed.
























    
