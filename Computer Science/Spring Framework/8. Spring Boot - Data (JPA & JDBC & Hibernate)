* Spring JDBC:
- JDBC (Java Database Connectivity) is an API that defines how a client may access a database
- Is oriented toward relational databases and executes SQL queries.
- Handles the exception.
- This API consists of classes and interfaces written in Java.
- It creates channel between your java program and databases.

Below are the steps that explains how to connect to Database in Java:

Step 1 – Import the Packages
Step 2 – Load the drivers using the forName() method => we load the driver’s class file into memory at the runtime.
Step 3 – After loading the driver, establish connections => Connection con = DriverManager.getConnection(url,user,password)
Step 4 – Establish a connection using the Connection class object
Step 5 – Create a statement
         The JDBCStatement, CallableStatement, and PreparedStatement interfaces define the methods 
         that enable you to send SQL commands and receive data from your database.
Step 6 – Execute the query
Step 7 – Close the connections

~ JDBC consists of two parts as depicted below:
JDBC interfaces: java.sql / javax.sql packages have classes/interfaces of JDBC API.
JDBC drivers: JDBC Driver allows Java programs to interact with the database.

~ JDBC Connection Pooling:
JDBC Connection pooling is a mechanism which makes a database connection as reusable for more than one client.
When we use DriverManager or DataSource, the connection opened with a DataSource is a non-reusable.

~ JDBC Template: 
- is an application programming interface (API) that defines how a client may access a database.
- creation and closing of connections
- running statements and stored procedure calls
- iterating over the ResultSet and returning results

SqlParameterSource namedParameters = new MapSqlParameterSource().addValue("id", 1);
return namedParameterJdbcTemplate.queryForObject(
  "SELECT FIRST_NAME FROM EMPLOYEE WHERE ID = :id", namedParameters, String.class);

~ Statements:
1. Create Statement
         Statement statement = con.createStatement();
         String sql = "select * from people";
         ResultSet result = statement.executeQuery(sql);

2. Prepared Statement: This accepts parameterized SQL queries.
         PreparedStatement ps = con.prepareStatement(
                "select name from world.people where age = ?");
         ps.setInt(1, age);
         ResultSet result = ps.executeQuery();

3. Callable Statement: Callable Statements are stored procedures which are a group of statements that we compile in the DB.
         CallableStatement cs = con.prepareCall("{call peopleinfo(?,?)}");
         cs.setString(1, "Bob");
         cs.setInt(2, 64);
         cs.execute();
         ResultSet result = s.executeQuery("select * from people");

* Spring ORM: a technique or a Design Pattern used to access a relational database from an object-oriented language.
ORM covers many persistence technologies:
1. JPA(Java Persistence API): It acts as a bridge between object-oriented domain models and relational database systems.
2. JDO(Java Data Objects): It is one of the standard ways to access persistent data in databases, by using POJO.
3. Hibernate – It is a Java framework that simplifies the development of Java applications to interact with the database.

ORM is the process of persisting any java object directly into a database table.
JPA is the interface while hibernate is the implementation. 

* Spring JPA
- provides a specification for persisting, reading, and managing data from your java object to your relational tables in the database.
- JPA specifies the set of rules and guidelines for developing interfaces that follow standards. 
- JPA is just guidelines to implement ORM and there is no underlying code for the implementation.
- Spring Data JPA is not a JPA provider, it is a library/framework that adds an extra layer of abstraction on the top of our JPA provider line Hibernate. 

JPA annotations:
Modal layer:
@Entity: This annotation defines that a class can be mapped to a table.
@Id: This annotation specifies the primary key of the entity.
@GeneratedValue: This annotation is used to specify the primary key generation strategy to use.

DAO(Data access object) layer:
@Repository: is a marker for any class that fulfills the role or stereotype of a repository.
JpaRepository<Employee, Long> JpaRepository is a JPA-specific extension of the Repository.

Service layer:
@Service: This annotation is used with classes that provide some business functionalities.

Controller layer:
@RestController: 
@Autowired: 
@PostMapping/@GetMapping/@DeleteMapping: This annotation maps HTTP POST/GET/DELETE requests onto specific handler methods.
A shortcut for @RequestMapping(method = RequestMethod.(POST/GET/DELETE))

* Spring Hibernate
- provides a solution for object relation mapping that use to map object-relational databases to the spring boot application.
- implements the JPA specification for the persistence data.

How to configure Hibernate using MySQL
- Add database configuration in the property file.
- After adding database configuration add JPA (Java Persistence API) configuration.
#jpa configuration
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.formate_sql=true;
- Add the dependency for MySQL in the pom.xml file
- Create an Entity package to create a table in the database.
- Now add the variables and getter setter methods in the entity file using annotations.
